name: Build & Deploy

on:
  push:
    branches:
      - main

jobs:
  
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.9.0'

    - name: Install Angular CLI and dependencies
      run: |
        npm install -g @angular/cli@17.1.0
        cd ./frontend
        npm install

    - name: Build Angular app
      run: |
        cd ./frontend
        ng build --configuration production

    - name: Moving the build to the backend
      run: |
        cd ./frontend
        mv ./dist/com.jugglehive.frontend/browser ../backend/src/main/resources/static

    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: '17'

    - name: Build Spring app
      run: |
        cd ./backend
        mvn clean package -DskipTests -Dspring-boot.version=3.2.2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
    
    - name: Delete old container images
      uses: actions/delete-package-versions@v5
      with: 
        package-name: '${{ github.event.repository.name }}'
        package-type: 'container'
    
    - name: Build and push
      run: |
        IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        VERSION=latest
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker buildx build --file ./backend/Dockerfile --label runnumber=${GITHUB_RUN_ID} --platform linux/amd64,linux/arm64 --tag $IMAGE_ID:$VERSION --push .
              
  deploy:

    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Clean the environment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DOMAIN }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          sudo chown -R ${{ secrets.SERVER_USERNAME }}:${{ secrets.SERVER_USERNAME }} /root
          sudo rm -rf /root/docker

    - name: Copy compose folder
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DOMAIN }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        source: "./docker"
        target: "/root"

    - name: Actual deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DOMAIN }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          sudo touch /etc/environment
          secrets_array=("CERTBOT_EMAIL" "POSTGRES_DATABASE" "POSTGRES_HOST" "POSTGRES_USER" "POSTGRES_PASSWORD" "DOMAIN" "IMG_NAME")
          for secret in "${secrets_array[@]}"; do
            sudo sed -i "/^${secret}=/d" /etc/environment || true
            case "${secret}" in
              "CERTBOT_EMAIL")
                echo "CERTBOT_EMAIL=${{ secrets.CERTBOT_EMAIL }}" | sudo tee -a /etc/environment
                ;;
              "POSTGRES_DATABASE")
                echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}" | sudo tee -a /etc/environment
                ;;
              "POSTGRES_HOST")
                echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" | sudo tee -a /etc/environment
                ;;
              "POSTGRES_USER")
                echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" | sudo tee -a /etc/environment
                ;;
              "POSTGRES_PASSWORD")
                echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" | sudo tee -a /etc/environment
                ;;
              "DOMAIN")
                echo "DOMAIN=${{ secrets.DOMAIN }}" | sudo tee -a /etc/environment
                ;;
              "IMG_NAME")
                echo "IMG_NAME=ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}" | sudo tee -a /etc/environment
                ;;
              *)
                echo "Unknown secret: ${secret}"
                ;;
            esac
          done
          for env in $( cat /etc/environment ); do export $(echo $env | sed -e 's/"//g'); done
          sed -i "s/\$DOMAIN/$DOMAIN/g" /root/docker/web/nginx.conf
          sed -i "s/\$DOMAIN/$DOMAIN/g" /root/docker/kickstart/web/nginx.conf
          if [ ! -d "/root/data" ]; then
            sudo mkdir /root/data
          fi
          sudo docker stop $(sudo docker ps -a -q)
          sudo docker container prune -f
          sudo docker rmi $IMG_NAME
          sudo docker network prune -f
          sudo kill -9 $(sudo lsof -t -i :443)
          sudo kill -9 $(sudo lsof -t -i :80)
          sudo systemctl stop docker
          sudo systemctl start docker.service
          if [ ! -d "/root/data/certbot" ]; then
            cd /root/docker/kickstart
            sudo docker compose up -d
            sleep 60
            sudo docker compose down
            sudo docker stop $(sudo docker ps -a -q)
            sudo docker container prune -f
          fi
          for url in $(sudo cat ~/.docker/config.json | jq -r '.auths | keys | .[]'); do sudo docker logout $url; done
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u $ --password-stdin
          cd /root/docker
          sudo docker compose up -d