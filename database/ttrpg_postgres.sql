-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;

CREATE TABLE IF NOT EXISTS ttrpg.allowed_item
(
    class_id integer NOT NULL,
    item_type character(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "allowed_item_PRIMARY" PRIMARY KEY (class_id)
);

CREATE TABLE IF NOT EXISTS ttrpg.base_stats
(
    id integer NOT NULL,
    vitality integer,
    strength integer,
    dexterity integer,
    arcane integer,
    instinct integer,
    charisma integer,
    speed integer,
    CONSTRAINT "base_stats_PRIMARY" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ttrpg.chara
(
    id integer NOT NULL,
    info_id integer NOT NULL,
    age integer NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    region_id integer NOT NULL,
    race_id integer NOT NULL,
    lvl_up_stat_id integer NOT NULL,
    CONSTRAINT "chara_PRIMARY" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ttrpg.character_classes
(
    character_id integer NOT NULL,
    class_id integer NOT NULL,
    CONSTRAINT "character_classes_PRIMARY" PRIMARY KEY (character_id, class_id)
);

CREATE TABLE IF NOT EXISTS ttrpg.character_info
(
    id integer NOT NULL,
    lvl integer,
    current_hp integer,
    shield integer,
    max_hp integer,
    current_mp integer,
    current_ki integer,
    current_fury integer,
    current_miracles integer,
    current_metamorphs integer,
    CONSTRAINT "character_info_PRIMARY" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ttrpg.character_skills
(
    character_id integer NOT NULL,
    total_uses integer NOT NULL DEFAULT 0,
    status integer,
    unlocked_skill_id integer,
    temp_uses integer,
    CONSTRAINT "character_skills_PRIMARY" PRIMARY KEY (character_id)
);

CREATE TABLE IF NOT EXISTS ttrpg.characters_tree_points
(
    character_id integer NOT NULL,
    tree_id integer NOT NULL,
    available_points integer,
    CONSTRAINT "characters_tree_points_PRIMARY" PRIMARY KEY (character_id, tree_id)
);

CREATE TABLE IF NOT EXISTS ttrpg.class
(
    id integer NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(150) COLLATE pg_catalog."default" NOT NULL,
    tree_id integer NOT NULL,
    stats_id integer NOT NULL,
    CONSTRAINT "class_PRIMARY" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ttrpg.inventory
(
    character_id integer NOT NULL,
    item_id integer NOT NULL,
    equipped boolean NOT NULL DEFAULT false,
    stacks integer,
    CONSTRAINT "inventory_PRIMARY" PRIMARY KEY (character_id)
);

CREATE TABLE IF NOT EXISTS ttrpg.item
(
    id integer NOT NULL,
    name character varying(255) COLLATE pg_catalog."default" NOT NULL,
    description character varying(255) COLLATE pg_catalog."default" NOT NULL,
    type character(255) COLLATE pg_catalog."default" NOT NULL,
    main_skill_id integer,
    weight double precision NOT NULL,
    stackable boolean NOT NULL DEFAULT false,
    CONSTRAINT "item_PRIMARY" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ttrpg.item_skill
(
    item_id integer NOT NULL,
    skill_id integer NOT NULL,
    CONSTRAINT "item_skill_PRIMARY" PRIMARY KEY (item_id, skill_id)
);

CREATE TABLE IF NOT EXISTS ttrpg.race
(
    id integer NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(150) COLLATE pg_catalog."default" NOT NULL,
    stat_id integer NOT NULL,
    level_up_hp integer NOT NULL DEFAULT 0,
    CONSTRAINT "race_PRIMARY" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ttrpg.race_region
(
    race_id integer NOT NULL,
    region_id integer NOT NULL,
    CONSTRAINT "race_region_PRIMARY" PRIMARY KEY (race_id, region_id)
);

CREATE TABLE IF NOT EXISTS ttrpg.race_skill
(
    race_id integer NOT NULL,
    skill_tree_id integer NOT NULL,
    slot integer,
    CONSTRAINT "race_skill_PRIMARY" PRIMARY KEY (race_id, skill_tree_id)
);

CREATE TABLE IF NOT EXISTS ttrpg.region
(
    id integer NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(150) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "region_PRIMARY" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ttrpg.skill
(
    id integer NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(150) COLLATE pg_catalog."default" NOT NULL,
    type character(255) COLLATE pg_catalog."default" NOT NULL,
    cost integer,
    cost_type character(255) COLLATE pg_catalog."default",
    skill_family_id integer NOT NULL,
    skil_family_rank integer NOT NULL,
    CONSTRAINT "skill_PRIMARY" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ttrpg.skill_family
(
    id integer NOT NULL,
    CONSTRAINT "skill_family_PRIMARY" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ttrpg.skill_modifier
(
    id integer NOT NULL,
    skill_id integer NOT NULL,
    is_malus smallint NOT NULL DEFAULT '0'::smallint,
    is_area smallint NOT NULL DEFAULT '1'::smallint,
    target_num integer NOT NULL DEFAULT 1,
    target_type character(255) COLLATE pg_catalog."default" NOT NULL,
    stat_target character(255) COLLATE pg_catalog."default",
    stat_flat integer,
    stat_scaling character(255) COLLATE pg_catalog."default",
    stat_max_scaling integer,
    stat_type character(255) COLLATE pg_catalog."default",
    CONSTRAINT "skill_modifier_PRIMARY" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ttrpg.skill_modifier_dices
(
    skill_modifier_id integer NOT NULL,
    times integer NOT NULL DEFAULT 1,
    faces integer NOT NULL,
    CONSTRAINT "skill_modifier_dices_PRIMARY" PRIMARY KEY (skill_modifier_id)
);

CREATE TABLE IF NOT EXISTS ttrpg.tree
(
    id integer NOT NULL,
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    description character varying(150) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "tree_PRIMARY" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ttrpg.tree_skills
(
    tree_id integer NOT NULL,
    skill_family_id integer NOT NULL,
    parent_skill_family_id integer,
    CONSTRAINT "tree_skills_PRIMARY" PRIMARY KEY (tree_id)
);

ALTER TABLE IF EXISTS ttrpg.allowed_item
    ADD CONSTRAINT "FK_allowed_item_class_id" FOREIGN KEY (class_id)
    REFERENCES ttrpg.class (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "allowed_item_PRIMARY"
    ON ttrpg.allowed_item(class_id);


ALTER TABLE IF EXISTS ttrpg.chara
    ADD CONSTRAINT "FK_chara_info_id" FOREIGN KEY (info_id)
    REFERENCES ttrpg.character_info (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_chara_info_id"
    ON ttrpg.chara(info_id);


ALTER TABLE IF EXISTS ttrpg.chara
    ADD CONSTRAINT "FK_chara_lvl_up_stat_id" FOREIGN KEY (lvl_up_stat_id)
    REFERENCES ttrpg.base_stats (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_chara_lvl_up_stat_id"
    ON ttrpg.chara(lvl_up_stat_id);


ALTER TABLE IF EXISTS ttrpg.chara
    ADD CONSTRAINT "FK_chara_race_id" FOREIGN KEY (race_id)
    REFERENCES ttrpg.race (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_chara_race_id"
    ON ttrpg.chara(race_id);


ALTER TABLE IF EXISTS ttrpg.chara
    ADD CONSTRAINT "FK_chara_region_id" FOREIGN KEY (region_id)
    REFERENCES ttrpg.region (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_chara_region_id"
    ON ttrpg.chara(region_id);


ALTER TABLE IF EXISTS ttrpg.character_classes
    ADD CONSTRAINT "FK_character_classes_character_id" FOREIGN KEY (character_id)
    REFERENCES ttrpg.chara (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS ttrpg.character_classes
    ADD CONSTRAINT "FK_character_classes_class_id" FOREIGN KEY (class_id)
    REFERENCES ttrpg.class (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_character_classes_class_id"
    ON ttrpg.character_classes(class_id);


ALTER TABLE IF EXISTS ttrpg.character_skills
    ADD CONSTRAINT "FK_character_skills_character_id" FOREIGN KEY (character_id)
    REFERENCES ttrpg.chara (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "character_skills_PRIMARY"
    ON ttrpg.character_skills(character_id);


ALTER TABLE IF EXISTS ttrpg.character_skills
    ADD CONSTRAINT "FK_character_skills_unlocked_skill_id" FOREIGN KEY (unlocked_skill_id)
    REFERENCES ttrpg.skill (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_character_skills_unlocked_skill_id"
    ON ttrpg.character_skills(unlocked_skill_id);


ALTER TABLE IF EXISTS ttrpg.characters_tree_points
    ADD CONSTRAINT "FK_characters_tree_points_character_id" FOREIGN KEY (character_id)
    REFERENCES ttrpg.chara (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS ttrpg.characters_tree_points
    ADD CONSTRAINT "FK_characters_tree_points_tree_id" FOREIGN KEY (tree_id)
    REFERENCES ttrpg.tree (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_characters_tree_points_tree_id"
    ON ttrpg.characters_tree_points(tree_id);


ALTER TABLE IF EXISTS ttrpg.class
    ADD CONSTRAINT "FK_class_stats_id" FOREIGN KEY (stats_id)
    REFERENCES ttrpg.base_stats (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_class_stats_id"
    ON ttrpg.class(stats_id);


ALTER TABLE IF EXISTS ttrpg.class
    ADD CONSTRAINT "FK_class_tree_id" FOREIGN KEY (tree_id)
    REFERENCES ttrpg.tree (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_class_tree_id"
    ON ttrpg.class(tree_id);


ALTER TABLE IF EXISTS ttrpg.inventory
    ADD CONSTRAINT "FK_inventory_character_id" FOREIGN KEY (character_id)
    REFERENCES ttrpg.chara (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "inventory_PRIMARY"
    ON ttrpg.inventory(character_id);


ALTER TABLE IF EXISTS ttrpg.inventory
    ADD CONSTRAINT "FK_inventory_item_id" FOREIGN KEY (item_id)
    REFERENCES ttrpg.item (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_inventory_item_id"
    ON ttrpg.inventory(item_id);


ALTER TABLE IF EXISTS ttrpg.item
    ADD CONSTRAINT "FK_item_main_skill_id" FOREIGN KEY (main_skill_id)
    REFERENCES ttrpg.skill (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_item_main_skill_id"
    ON ttrpg.item(main_skill_id);


ALTER TABLE IF EXISTS ttrpg.item_skill
    ADD CONSTRAINT "FK_item_skill_item_id" FOREIGN KEY (item_id)
    REFERENCES ttrpg.item (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS ttrpg.item_skill
    ADD CONSTRAINT "FK_item_skill_skill_id" FOREIGN KEY (skill_id)
    REFERENCES ttrpg.skill (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_item_skill_skill_id"
    ON ttrpg.item_skill(skill_id);


ALTER TABLE IF EXISTS ttrpg.race_region
    ADD CONSTRAINT "FK_race_region_race_id" FOREIGN KEY (race_id)
    REFERENCES ttrpg.race (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS ttrpg.race_region
    ADD CONSTRAINT "FK_race_region_region_id" FOREIGN KEY (region_id)
    REFERENCES ttrpg.region (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_race_region_region_id"
    ON ttrpg.race_region(region_id);


ALTER TABLE IF EXISTS ttrpg.race_skill
    ADD CONSTRAINT "FK_race_skill_race_id" FOREIGN KEY (race_id)
    REFERENCES ttrpg.race (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;


ALTER TABLE IF EXISTS ttrpg.race_skill
    ADD CONSTRAINT "FK_race_skill_skill_tree_id" FOREIGN KEY (skill_tree_id)
    REFERENCES ttrpg.tree (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_race_skill_skill_tree_id"
    ON ttrpg.race_skill(skill_tree_id);


ALTER TABLE IF EXISTS ttrpg.skill
    ADD CONSTRAINT skill_ibfk_1 FOREIGN KEY (skill_family_id)
    REFERENCES ttrpg.skill_family (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS skill_family_id
    ON ttrpg.skill(skill_family_id);


ALTER TABLE IF EXISTS ttrpg.skill_modifier
    ADD CONSTRAINT "FK_skill_modifier_skill_id" FOREIGN KEY (skill_id)
    REFERENCES ttrpg.skill (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_skill_modifier_skill_id"
    ON ttrpg.skill_modifier(skill_id);


ALTER TABLE IF EXISTS ttrpg.skill_modifier
    ADD CONSTRAINT skill_modifier_ibfk_1 FOREIGN KEY (skill_id)
    REFERENCES ttrpg.skill (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_skill_modifier_skill_id"
    ON ttrpg.skill_modifier(skill_id);


ALTER TABLE IF EXISTS ttrpg.skill_modifier_dices
    ADD CONSTRAINT skill_modifier_dices_ibfk_1 FOREIGN KEY (skill_modifier_id)
    REFERENCES ttrpg.skill_modifier (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "skill_modifier_dices_PRIMARY"
    ON ttrpg.skill_modifier_dices(skill_modifier_id);


ALTER TABLE IF EXISTS ttrpg.tree_skills
    ADD CONSTRAINT "FK_tree_skills_skill_family_id" FOREIGN KEY (skill_family_id)
    REFERENCES ttrpg.skill_family (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "FK_tree_skills_skill_family_id"
    ON ttrpg.tree_skills(skill_family_id);


ALTER TABLE IF EXISTS ttrpg.tree_skills
    ADD CONSTRAINT "FK_tree_skills_tree_id" FOREIGN KEY (tree_id)
    REFERENCES ttrpg.tree (id) MATCH SIMPLE
    ON UPDATE RESTRICT
    ON DELETE RESTRICT;
CREATE INDEX IF NOT EXISTS "tree_skills_PRIMARY"
    ON ttrpg.tree_skills(tree_id);

END;